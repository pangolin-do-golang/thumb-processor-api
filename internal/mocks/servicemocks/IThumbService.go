// Code generated by mockery v2.51.1. DO NOT EDIT.

package servicemocks

import (
	context "context"

	entity "github.com/pangolin-do-golang/thumb-processor-api/internal/core/domain/entity"
	mock "github.com/stretchr/testify/mock"

	ports "github.com/pangolin-do-golang/thumb-processor-api/internal/core/ports"
)

// IThumbService is an autogenerated mock type for the IThumbService type
type IThumbService struct {
	mock.Mock
}

// CreateProcessAsync provides a mock function with given fields: ctx, request
func (_m *IThumbService) CreateProcessAsync(ctx context.Context, request *ports.CreateProcessRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateProcessAsync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *ports.CreateProcessRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListProcess provides a mock function with given fields: ctx
func (_m *IThumbService) ListProcess(ctx context.Context) *[]entity.ThumbProcess {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListProcess")
	}

	var r0 *[]entity.ThumbProcess
	if rf, ok := ret.Get(0).(func(context.Context) *[]entity.ThumbProcess); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.ThumbProcess)
		}
	}

	return r0
}

// UpdateProcess provides a mock function with given fields: ctx, request
func (_m *IThumbService) UpdateProcess(ctx context.Context, request *ports.UpdateProcessRequest) (*entity.ThumbProcess, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProcess")
	}

	var r0 *entity.ThumbProcess
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ports.UpdateProcessRequest) (*entity.ThumbProcess, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ports.UpdateProcessRequest) *entity.ThumbProcess); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.ThumbProcess)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ports.UpdateProcessRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIThumbService creates a new instance of IThumbService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIThumbService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IThumbService {
	mock := &IThumbService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
